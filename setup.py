#! /usr/bin/env python

# NOTE: This has been taken from scikit-learn's setup.py.
# Refer github.com/scikit-learn/scikit-learn for the original version...
# Reason why we don't follow a minimial version of this setup.py is to ensure
# that scikit-learn's master would be able to compile when patched fully with
# these updates.

# License: 3-clause BSD

import sys
import os
import shutil
from distutils.command.clean import clean as Clean
from pkg_resources import parse_version
import traceback

if sys.version_info[0] < 3:
    import __builtin__ as builtins
else:
    import builtins

# TODO: Do we need this?

# This is a bit (!) hackish: we are setting a global variable so that the main
# sktrees __init__ can detect if it is being loaded by the setup routine, to
# avoid attempting to load components that aren't built yet:
# the numpy distutils extensions that are used by scikit-learn (and sktrees)
# to recursively build the compiled extensions in sub-packages is based on the
# Python import machinery.
builtins.__SKTREES_SETUP__ = True

DISTNAME = 'sktrees'
DESCRIPTION = "Unofficial bleeding edge updates to scikit-learn's tree models."
with open('README.md') as f:
    LONG_DESCRIPTION = f.read()
MAINTAINER = 'Raghav RV'
MAINTAINER_EMAIL = 'rvraghav93@gmail.com'
URL = 'http://sktrees.github.io'
LICENSE = 'new BSD'

# We are going to have the same version as sklearn to avoid any confusion in
# compatibility
# That is: sktrees of version 0.19 can be patched over sklearn 0.19 "safely"
VERSION = '0.19.dev0'
PATCHABLE_SKLEARN_VERSION = '0.19.dev0'


# Optional setuptools features
# We need to import setuptools early, if we want setuptools features,
# as it monkey-patches the 'setup' function
# For some commands, use setuptools
SETUPTOOLS_COMMANDS = set([
    'develop', 'release', 'bdist_egg', 'bdist_rpm',
    'bdist_wininst', 'install_egg_info', 'build_sphinx',
    'egg_info', 'easy_install', 'upload', 'bdist_wheel',
    '--single-version-externally-managed',
])
if SETUPTOOLS_COMMANDS.intersection(sys.argv):
    import setuptools

    extra_setuptools_args = dict(
        zip_safe=False,  # the package can run out of an .egg file
        include_package_data=True,
        extras_require={
            'alldeps': (
                'numpy >= {0}'.format(NUMPY_MIN_VERSION),
                'scipy >= {0}'.format(SCIPY_MIN_VERSION),
                'sklearn == {0}'.format(PATCHABLE_SKLEARN_VERSION),
            ),
        },
    )
else:
    extra_setuptools_args = dict()


# Custom clean command to remove build artifacts

class CleanCommand(Clean):
    description = "Remove build artifacts from the source tree"

    def run(self):
        Clean.run(self)
        # Remove c files if we are not within a sdist package
        cwd = os.path.abspath(os.path.dirname(__file__))
        remove_c_files = not os.path.exists(os.path.join(cwd, 'PKG-INFO'))
        if remove_c_files:
            print('Will remove generated .c files')
        if os.path.exists('build'):
            shutil.rmtree('build')
        for dirpath, dirnames, filenames in os.walk('sktrees'):
            for filename in filenames:
                if any(filename.endswith(suffix) for suffix in
                       (".so", ".pyd", ".dll", ".pyc")):
                    os.unlink(os.path.join(dirpath, filename))
                    continue
                extension = os.path.splitext(filename)[1]
                if remove_c_files and extension in ['.c', '.cpp']:
                    pyx_file = str.replace(filename, extension, '.pyx')
                    if os.path.exists(os.path.join(dirpath, pyx_file)):
                        os.unlink(os.path.join(dirpath, filename))
            for dirname in dirnames:
                if dirname == '__pycache__':
                    shutil.rmtree(os.path.join(dirpath, dirname))


cmdclass = {'clean': CleanCommand}

# Optional wheelhouse-uploader features
# To automate release of binary packages for sktrees we need a tool
# to download the packages generated by travis and appveyor workers (with
# version number matching the current release) and upload them all at once
# to PyPI at release time.
# The URL of the artifact repositories are configured in the setup.cfg file.

WHEELHOUSE_UPLOADER_COMMANDS = set(['fetch_artifacts', 'upload_all'])
if WHEELHOUSE_UPLOADER_COMMANDS.intersection(sys.argv):
    import wheelhouse_uploader.cmd

    cmdclass.update(vars(wheelhouse_uploader.cmd))


def configuration(parent_package='', top_path=None):
    if os.path.exists('MANIFEST'):
        os.remove('MANIFEST')

    from numpy.distutils.misc_util import Configuration
    config = Configuration(None, parent_package, top_path)

    # Avoid non-useful msg:
    # "Ignoring attempt to set 'name' (from ... "
    config.set_options(ignore_setup_xxx_py=True,
                       assume_default_configuration=True,
                       delegate_options_to_subpackages=True,
                       quiet=True)

    config.add_subpackage('sktrees')

    return config


def get_sklearn_status():
    """
    Returns a dictionary containing a boolean specifying whether sklearn
    is up-to-date, along with the version string (empty string if
    not installed).
    """
    sklearn_status = {}
    try:
        import sklearn
        sklearn_version = sklearn.__version__
        sklearn_status['up_to_date'] = parse_version(
            sklearn_version) == parse_version(PATCHABLE_SKLEARN_VERSION)
        sklearn_status['version'] = sklearn_version
    except ImportError:
        traceback.print_exc()
        sklearn_status['up_to_date'] = False
        sklearn_status['version'] = ""
    return sklearn_status


def setup_package():
    metadata = dict(name=DISTNAME,
                    maintainer=MAINTAINER,
                    maintainer_email=MAINTAINER_EMAIL,
                    description=DESCRIPTION,
                    license=LICENSE,
                    url=URL,
                    version=VERSION,
                    long_description=LONG_DESCRIPTION,
                    classifiers=['Intended Audience :: Science/Research',
                                 'Intended Audience :: Developers',
                                 'License :: OSI Approved',
                                 'Programming Language :: C',
                                 'Programming Language :: Python',
                                 'Topic :: Software Development',
                                 'Topic :: Scientific/Engineering',
                                 'Operating System :: Microsoft :: Windows',
                                 'Operating System :: POSIX',
                                 'Operating System :: Unix',
                                 'Operating System :: MacOS',
                                 'Programming Language :: Python :: 2',
                                 'Programming Language :: Python :: 2.7',
                                 'Programming Language :: Python :: 3',
                                 'Programming Language :: Python :: 3.4',
                                 'Programming Language :: Python :: 3.5',
                                 'Programming Language :: Python :: 3.6',
                                 ],
                    cmdclass=cmdclass,
                    **extra_setuptools_args)

    if len(sys.argv) == 1 or (
            len(sys.argv) >= 2 and ('--help' in sys.argv[1:] or
                                    sys.argv[1] in ('--help-commands',
                                                    'egg_info',
                                                    '--version',
                                                    'clean'))):
        # For these actions, scikit-learn is not required
        #
        # They are required to succeed without scikit-learn for example
        # when pip is used to install sktrees when scikit-learn is not yet
        # present in the system.
        try:
            from setuptools import setup
        except ImportError:
            from distutils.core import setup

        metadata['version'] = VERSION
    else:
        sklearn_status = get_sklearn_status()
        sklearn_req_str = "sktrees requires scikit-learn == {0}.\n".format(
            PATCHABLE_SKLEARN_VERSION)

        instructions = ("Installation instructions are available on the "
                        "sktrees website: "
                        "http://sktrees.github.io")

        if sklearn_status['up_to_date'] is False:
            if sklearn_status['version']:
                raise ImportError("Your installation of scikit-learn (sklearn)"
                                  " {0} is out-of-date.\n{1}{2}"
                                  .format(sklearn_status['version'],
                                          sklearn_req_str, instructions))
            else:
                raise ImportError("Scikit-learn (sklearn) is not "
                                  "installed.\n{0}{1}"
                                  .format(sklearn_req_str, instructions))

        from numpy.distutils.core import setup

        metadata['configuration'] = configuration

    setup(**metadata)


if __name__ == "__main__":
    setup_package()
